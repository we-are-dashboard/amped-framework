<?php

/** Mirrors Zend_Controller_Dispatcher_Standard but much faster */
class mvc_service_Front
{
	 protected static $_instance = null;
	 protected $_currentActionHtml, $_layoutActionHtml;
	 /** A layout is just the controller that would have the Action->contents() call 
	  *	 This instance can be either,
	  *  null: controller called 'layouts' with action 'index' will be used,
	  *  false (no layout to be rendered AT ALL), or 
	  *  string: the controller layout name specified from the action */
	 protected $_mainLayout = 'layouts';
	 /** The action that the controller above has */
	 protected $_mainLayoutAction = 'index';
	 /** The error view to be rendered. {$errorView}.phtml has to exist in 'views/errors' */
	 public $errorView = 'generic';
	
	/** Singleton instance
     * @return mvc_service_Front */
    public static function getInstance(){
        if (null === self::$_instance) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }
	
    /** Start everything ... */
	public function dispatch(){
		$ctrl = mvc_service_Router::getInstance()->getController();
		// Get the HTML generated by the current controller-action running
		$this->_currentActionHtml = $this->dispatchAction(
			$this->getCurrentActionName($ctrl), $ctrl['controller']);
		// Get the HTML of the set layout controller-action if one is set
		$result = ($this->useMainLayout($ctrl)) ? 
			$this->_layoutActionHtml = $this->dispatchAction($this->getMainLayoutAction(), $this->getMainLayout($ctrl)) :
			$this->_currentActionHtml;
		
		echo $result;
		//echo $this->_currentActionHtml;
	}
	
	/** Mirrors Zend_Controller_Dispatcher_Standard::dispatch but much faster */
	public function dispatchAction($action, $controller, $params=array()){
		$controllerFile = $this->getControllersLoc() . $controller . ".php";
		
		if(!include_once $controllerFile)
			throw new Exception("Cannot load controller class '$controller' from file '$controllerFile'");
		
		if(!class_exists($controller))
			throw new Exception("Invalid template class '$controller'. 
				The template class should be exactly the same as your template name.");
				
		$controllerObject = new $controller();
				
		if(!($controllerObject instanceof mvc_service_Action ))
			throw new Exception("Controller '$controller' is not an instance of mvc_service_Action");
		
		// let mvc_service_Action dispatch its action at this point and worry about output buffering
		$obLevel   = ob_get_level();
        ob_start();

        try {
            $controllerObject->dispatch($action, $controller, $params);
        } catch (Exception $e) {
            // Clean output buffer on error
            $curObLevel = ob_get_level();
            if ($curObLevel > $obLevel) {
                do {
                    ob_get_clean();
                    $curObLevel = ob_get_level();
                } while ($curObLevel > $obLevel);
            }
            throw $e;
        }

		$content = ob_get_clean();
		
		return $content;
	}
	
	/** @param $mainLayout string. The layout can be a controller (eg. api)) or a controller-action 
	 * 		separated by a dash (eg main-something) where the first token is the controller name and second the action */
	public function setMainLayout($mainLayout){
		if($mainLayout === false){
			$this->_mainLayout = false;
			return;	
		}
		
		$toks = explode('-', $mainLayout);
		$this->_mainLayout = (isset($toks[0])) ? $toks[0] : 'layouts';
		//if the action was set before, having only the layout token shouldn't change the action
		$defaultAction = $this->_mainLayoutAction ? $this->_mainLayoutAction : 'index';
		$this->_mainLayoutAction = (isset($toks[1])) ? $toks[1] : $defaultAction;
	}
	
	public function getCurrentActionHtml(){
		return $this->_currentActionHtml;
	}
	
	public function getControllersLoc(){
		return ROOT_PATH . "/application/mvc/controllers/"; 
	}
	
	public function getViewsLoc(){
		return ROOT_PATH . "/application/mvc/views/"; 
	}
	
	private function getMainLayout($currentCtrl){
		return ($this->_mainLayout) ? $this->_mainLayout : $currentCtrl['controller'];
	}
	
	private function getMainLayoutAction(){
		return $this->_mainLayoutAction;
	}
	
	private function useMainLayout($currentCtrl){
		return ($this->_mainLayout !== false) && $currentCtrl['controller'];
	}
	
	private function getCurrentActionName($currentCtrl){
		return ($currentCtrl['action']) ? $currentCtrl['action'] : 'index';
	}
	
}









